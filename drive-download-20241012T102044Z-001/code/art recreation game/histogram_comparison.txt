import cv2
import numpy as np

def compare_histograms(image_path1, image_path2):
    """Compare two images using histograms, excluding transparent areas."""
    # Read the images with alpha channel
    imageA = cv2.imread("pics\\og.png" , cv2.IMREAD_UNCHANGED)
    imageB = cv2.imread("pics\\try1.png", cv2.IMREAD_UNCHANGED)

  # Ensure both images have an alpha channel
    if imageA.shape[2] != 4 or imageB.shape[2] != 4:
        raise ValueError("Both images must have an alpha channel.")

    # Create masks for non-transparent pixels
    maskA = imageA[:, :, 3] > 0
    maskB = imageB[:, :, 3] > 0

    # Check if there are non-transparent pixels
    if np.count_nonzero(maskA) == 0 or np.count_nonzero(maskB) == 0:
        print("One of the images has no non-transparent pixels.")
        return

    # Calculate histograms only for non-transparent pixels
    histA = cv2.calcHist([imageA[:, :, :3]], [0, 1], maskA.astype(np.uint8), [50, 60], [0, 256, 0, 256])
    histB = cv2.calcHist([imageB[:, :, :3]], [0, 1], maskB.astype(np.uint8), [50, 60], [0, 256, 0, 256])

    # Normalize histograms
    cv2.normalize(histA, histA, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX)
    cv2.normalize(histB, histB, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX)

    # Compare histograms using correlation
    correlation = cv2.compareHist(histA, histB, cv2.HISTCMP_CORREL)

    # Convert to percentage
    percentage = correlation * 100
    
    print(f'Histogram Correlation (as percentage, excluding transparent areas): {percentage:.2f}%')

# Example usage
compare_histograms('image1.png', 'image2.png')